// SPDX-License-Identifier: MIT

pragma solidity >=0.6.12 <0.9.0;


contract AssertRevertRequired {
    address public owner;
    uint256 public totalValue;

    constructor() {
        owner = msg.sender;
    }

    function deposit(uint256 amount) external {
        require(msg.sender == owner, "Owners only may make deposits.");
        
        require(amount > 0, "Deposit amount must be greater than zero");

        totalValue += amount;
    }

    function withdraw(uint256 amount) external {

        require(amount <= address(this).balance, "Insufficient balance");

        require(amount > 0, "The amount of the withdrawal must be more than 0.");

        if (msg.sender != owner) {
            revert("Cannot be access");
        }

      
        assert(totalValue >= amount);

      
        payable(owner).transfer(amount);

    
        totalValue -= amount;
    }
}
